import pytest
from fastapi import status
from fastapi.testclient import TestClient
from app.dal.user_favorite_dal import UserFavoriteDAL
from tests.utils import create_test_user, create_test_product, authenticate_user

@pytest.mark.asyncio
async def test_remove_favorite(client: TestClient):
    # 创建用户和收藏
    user = await create_test_user(client)
    product = await create_test_product(client, user["id"])
    token = authenticate_user(client, user)
    
    # 先添加收藏
    client.post(f"/api/v1/favorites/{product['product_id']}", headers={"Authorization": f"Bearer {token}"})
    
    # 删除收藏
    response = client.delete(f"/api/v1/favorites/{product['product_id']}", headers={"Authorization": f"Bearer {token}"})
    
    # 断言
    assert response.status_code == status.HTTP_200_OK
    assert response.json()["message"] == "Product removed from favorites successfully"

@pytest.mark.asyncio
async def test_get_user_favorites(client: TestClient):
    # 创建用户和多个收藏
    user = await create_test_user(client)
    product1 = await create_test_product(client, user["id"])
    product2 = await create_test_product(client, user["id"])
    token = authenticate_user(client, user)
    
    # 添加收藏
    client.post(f"/api/v1/favorites/{product1['product_id']}", headers={"Authorization": f"Bearer {token}"})
    client.post(f"/api/v1/favorites/{product2['product_id']}", headers={"Authorization": f"Bearer {token}"})
    
    # 获取收藏列表
    response = client.get("/api/v1/favorites", headers={"Authorization": f"Bearer {token}"})
    
    # 断言
    assert response.status_code == status.HTTP_200_OK
    assert len(response.json()) == 2